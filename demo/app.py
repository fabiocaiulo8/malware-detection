import streamlit as st
import requests
import pandas as pd

st.set_page_config('Malware Detection', 'ðŸ¦ ')

st.markdown(
    '''
    <style>

        #MainMenu {
            visibility: hidden;
        }

        footer {
            visibility: hidden;
        }

        header {
            visibility: hidden;
        }

    </style>
    ''',
    True
)

st.title('Malware Detection')

st.session_state['model'] = st.selectbox(
    'Choose a Model',
    ['Classic MLP', 'Hybrid MLP', 'Bagging SVM', 'Bagging QSVM', 'Linear SVM', 'Linear QSVM'],
    help='Trained with EMBER'
)

def update_metrics():
    accuracy, precision, recall, f1_score = [], [], [], []
    delta_color = 'normal'
    col1, col2, col3, col4 = st.columns(4)

    if st.session_state['model'] == 'Classic MLP':
        delta_color = 'off'
        accuracy, precision, recall, f1_score = ['90%', '90%'], ['90%', '90%'], ['90%', '90%'], ['90%', '90%']
    elif st.session_state['model'] == 'Hybrid MLP':
        accuracy, precision, recall, f1_score = ['88%', '-2%'], ['89%', '-1%'], ['88%', '-2%'], ['88%', '-2%']
    elif st.session_state['model'] == 'Bagging SVM':
        accuracy, precision, recall, f1_score = ['71%', '-19%'], ['75%', '-15%'], ['71%', '-19%'], ['70%', '-20%']
    elif st.session_state['model'] == 'Bagging QSVM':
        accuracy, precision, recall, f1_score = ['70%', '-20%'], ['71%', '-19%'], ['70%', '-20%'], ['69%', '-21%']
    elif st.session_state['model'] == 'Linear SVM':
        accuracy, precision, recall, f1_score = ['70%', '-20%'], ['73%', '-17%'], ['70%', '-20%'], ['68%', '-22%']
    elif st.session_state['model'] == 'Linear QSVM':
        accuracy, precision, recall, f1_score = ['64%', '-26%'], ['66%', '-24%'], ['64%', '-26%'], ['63%', '-27%']

    col1.metric('Accuracy', accuracy[0], accuracy[1], delta_color=delta_color)
    col2.metric('Precision', precision[0], precision[1], delta_color=delta_color)
    col3.metric('Recall', recall[0], recall[1], delta_color=delta_color)
    col4.metric('F1-score', f1_score[0], f1_score[1], delta_color=delta_color)

update_metrics()

st.divider()

st.session_state['executables'] = st.file_uploader('Choose Executables', 'exe', True)

def predict_api(model):
    try:
        return [
            requests.post(
                'https://malware-detection-api.onrender.com/predict/'+model,
                #'http://localhost:8000/predict/'+model,
                files={'file': (executable.name, executable, 'application/x-msdownload')}
            ).json() for executable in st.session_state['executables']
        ]
    except Exception:
        return None

def predict_executables():
    if len(st.session_state['executables']) != 0:
        with st.spinner('Predictions in progress...'):
            responses = []
            if st.session_state['model'] == 'Classic MLP':
                responses = predict_api('classic_mlp')
            elif st.session_state['model'] == 'Hybrid MLP':
                responses = predict_api('hybrid_mlp')
            elif st.session_state['model'] == 'Bagging SVM':
                responses = predict_api('bagging_svm')
            elif st.session_state['model'] == 'Bagging QSVM':
                responses = predict_api('bagging_qsvm')
            elif st.session_state['model'] == 'Linear SVM':
                responses = predict_api('linear_svm')
            elif st.session_state['model'] == 'Linear QSVM':
                responses = predict_api('linear_qsvm')

            if responses is None:
                st.error('An error occurred while computing the predictions, please try again')
                st.stop()

            df = pd.DataFrame([{
                'Executable': executable.name,
                'Prediction': 'ðŸ”µ Benign' if responses[i]['malware_confidence'] < 0.5 else 'ðŸ”´ Malicious',
                'Confidence': (1-responses[i]['malware_confidence'])*100 if responses[i]['malware_confidence'] < 0.5 else responses[i]['malware_confidence']*100
            } for i, executable in zip(range(len(responses)), st.session_state['executables'])])

            st.divider()

            st.dataframe(
                df,
                use_container_width=True,
                hide_index=True,
                column_config={
                    'Prediction': st.column_config.SelectboxColumn(required=True, options=['ðŸ”µ Benign', 'ðŸ”´ Malicious']),
                    'Confidence': st.column_config.ProgressColumn(format='%.2f%%', min_value=0, max_value=100)
                }
            )

        st.balloons()

predict_executables()

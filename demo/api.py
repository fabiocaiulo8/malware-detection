import functools
from keras.saving import load_model
import sys
sys.path.append('..')
from utils import qnn
import pickle
import lzma
from fastapi import FastAPI, UploadFile
from fastapi.exceptions import HTTPException
from utils import ember
import numpy as np

@functools.lru_cache(maxsize=1)
def load_classic_mlp():
    return load_model('../models/classic_mlp.keras')

@functools.lru_cache(maxsize=1)
def load_hybrid_mlp():
    classic_mlp = load_model('../models/classic_mlp.keras')
    hybrid_mlp = qnn.hybrid_mlp(classic_mlp.layers[0])
    del classic_mlp
    hybrid_mlp.load_weights('../models/hybrid_mlp.h5')
    return hybrid_mlp

@functools.lru_cache(maxsize=1)
def load_bagging_svm():
    return pickle.load(open('../models/bagging_svm.pkl', 'rb'))

@functools.lru_cache(maxsize=1)
def load_bagging_qsvm():
    return pickle.load(lzma.open('../models/bagging_qsvm.pkl.xz', 'rb'))

@functools.lru_cache(maxsize=1)
def load_linear_svm():
    return pickle.load(open('../models/linear_svm.pkl', 'rb'))

@functools.lru_cache(maxsize=1)
def load_linear_qsvm():
    return pickle.load(open('../models/linear_qsvm.pkl', 'rb'))

app = FastAPI()

@app.post('/predict/classic_mlp')
async def predict_classic_mlp(file: UploadFile):
    if file.content_type != 'application/x-msdownload':
        raise HTTPException(status_code=400, detail='File must be an executable')
    classic_mlp = load_classic_mlp()
    features = ember.PEFeatureExtractor().feature_vector(file.file.read())
    return {'malware_confidence': float(classic_mlp.predict(np.array([features]), verbose=0)[0][1])}

@app.post('/predict/hybrid_mlp')
async def predict_hybrid_mlp(file: UploadFile):
    if file.content_type != 'application/x-msdownload':
        raise HTTPException(status_code=400, detail='File must be an executable')
    hybrid_mlp = load_hybrid_mlp()
    features = ember.PEFeatureExtractor().feature_vector(file.file.read())
    return {'malware_confidence': float(hybrid_mlp.predict(np.array([features]), verbose=0)[0][1])}

@app.post('/predict/bagging_svm')
async def predict_bagging_svm(file: UploadFile):
    if file.content_type != 'application/x-msdownload':
        raise HTTPException(status_code=400, detail='File must be an executable')
    bagging_svm = load_bagging_svm()
    features = ember.PEFeatureExtractor().feature_vector(file.file.read())
    return {'malware_confidence': float(bagging_svm.predict_proba(np.array([features]))[0][1])}

@app.post('/predict/bagging_qsvm')
async def predict_bagging_qsvm(file: UploadFile):
    if file.content_type != 'application/x-msdownload':
        raise HTTPException(status_code=400, detail='File must be an executable')
    bagging_qsvm = load_bagging_qsvm()
    features = ember.PEFeatureExtractor().feature_vector(file.file.read())
    return {'malware_confidence': float(bagging_qsvm.predict_proba(np.array([features]))[0][1])}

@app.post('/predict/linear_svm')
async def predict_linear_svm(file: UploadFile):
    if file.content_type != 'application/x-msdownload':
        raise HTTPException(status_code=400, detail='File must be an executable')
    linear_svm = load_linear_svm()
    features = ember.PEFeatureExtractor().feature_vector(file.file.read())
    return {'malware_confidence': float(linear_svm.predict_proba(np.array([features]))[0][1])}

@app.post('/predict/linear_qsvm')
async def predict_linear_qsvm(file: UploadFile):
    if file.content_type != 'application/x-msdownload':
        raise HTTPException(status_code=400, detail='File must be an executable')
    linear_qsvm = load_linear_qsvm()
    features = ember.PEFeatureExtractor().feature_vector(file.file.read())
    return {'malware_confidence': float(linear_qsvm.predict_proba(np.array([features]))[0][1])}

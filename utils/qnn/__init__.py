__author__, __version__, __license__ = 'Fabio Caiulo', '1.0.0', 'MIT'

import keras
keras.backend.set_floatx('float64')
import pennylane as qml
from pennylane.templates import AngleEmbedding, BasicEntanglerLayers
from keras.layers import Normalization, Dense
from pennylane.qnn import KerasLayer

def hybrid_mlp(input, layers=6, qubits=2):
    """
    Hybrid Multilayer Perceptron
    """
    if type(input) is not type(Normalization()) or layers <= 0 or qubits <= 0:
        raise RuntimeError('The input layer must be a "Normalization" layer and the number of layers and qubits must be greater than 0')

    @qml.qnode(qml.device('default.qubit', qubits), diff_method='backprop')
    def quantum_circuit(inputs, weights):
        AngleEmbedding(inputs, range(qubits)) # embedding
        BasicEntanglerLayers(weights, range(qubits)) # trainable measurement
        return [qml.expval(qml.PauliZ(i)) for i in range(qubits)]

    hidden1 = Dense(qubits, 'relu')
    hidden2 = KerasLayer(quantum_circuit, {'weights': (layers, qubits)}, qubits) # quantum layer
    hidden3 = Dense(qubits, 'relu')
    output = Dense(2, 'sigmoid')

    model = keras.Sequential([input, hidden1, hidden2, hidden3, output])
    return model
